// ===================================================================
// Template de Projeto Java Moderno com Gradle
// ===================================================================

plugins {
    id 'application'                                                        // Plugin para aplicações executáveis
    id 'java'                                                              // Plugin base para Java
    id 'checkstyle'                                                        // Análise estática de código
    id 'jacoco'                                                           // Cobertura de testes
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.8.0' // Auto-provisionamento de JDKs
}

// ===================================================================
// Configurações Básicas do Projeto
// ===================================================================

group = 'com.template'
version = '1.0.0'

java {
    // Configuração do Java Toolchain - garante consistência entre ambientes
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)           // Java 17 (LTS)
        vendor = JvmVendorSpec.ADOPTIUM                        // OpenJDK da Eclipse Adoptium
    }
    
    // Configurações adicionais
    withSourcesJar()                                           // Gera JAR com código-fonte
    withJavadocJar()                                          // Gera JAR com documentação
}

// ===================================================================
// Configuração da Aplicação
// ===================================================================

application {
    mainClass = 'main.Main'                                   // Classe principal para execução
    
    // Argumentos padrão da JVM para otimização
    applicationDefaultJvmArgs = [
        '-Xms64m',                                            // Heap inicial
        '-Xmx256m',                                           // Heap máximo
        '-Dfile.encoding=UTF-8'                               // Encoding padrão
    ]
}

// ===================================================================
// Repositórios de Dependências
// ===================================================================

repositories {
    mavenCentral()                                            // Repositório central do Maven
    gradlePluginPortal()                                      // Para plugins do Gradle
}

// ===================================================================
// Dependências do Projeto
// ===================================================================

dependencies {
    // === Dependências de Teste ===
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'              // JUnit 5
    testImplementation 'org.assertj:assertj-core:3.25.1'                     // Assertions fluentes
    testImplementation 'org.mockito:mockito-core:5.8.0'                      // Mocking framework
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'             // Integração Mockito + JUnit 5
    
    // === Dependências de Runtime (exemplos para expandir o template) ===
    // implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'   // JSON processing
    // implementation 'org.slf4j:slf4j-api:2.0.9'                           // Logging API
    // runtimeOnly 'ch.qos.logback:logback-classic:1.4.14'                  // Logging implementation
}

// ===================================================================
// Configuração de Testes
// ===================================================================

test {
    useJUnitPlatform()                                        // Utiliza JUnit 5 Platform
    
    // Configurações de JVM para testes
    jvmArgs = [
        '-Dfile.encoding=UTF-8',
        '-Duser.timezone=UTC'
    ]
    
    // Relatórios detalhados
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
    }
    
    // Executa relatório de cobertura após os testes
    finalizedBy jacocoTestReport
}

// ===================================================================
// Configuração do Jacoco (Cobertura de Código)
// ===================================================================

jacoco {
    toolVersion = "0.8.11"                                   // Versão do Jacoco
}

jacocoTestReport {
    dependsOn test
    
    reports {
        xml.required = true                                   // Para integração com CI/CD
        html.required = true                                  // Para visualização local
        csv.required = false                                  // Desabilitado por padrão
    }
    
    // Limites mínimos de cobertura
    doLast {
        println "Relatório de cobertura gerado em: ${reports.html.outputLocation.get()}"
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.70                                // Mínimo de 70% de cobertura
            }
        }
    }
}

// ===================================================================
// Configuração do Checkstyle (Análise Estática)
// ===================================================================

checkstyle {
    toolVersion = '10.12.7'                                  // Versão do Checkstyle
    configFile = file('config/checkstyle/checkstyle.xml')    // Arquivo de configuração personalizado
    ignoreFailures = false                                    // Falha o build se houver violações
    maxWarnings = 0                                          // Não permite warnings
}

checkstyleMain {
    source = 'src/main/java'
}

checkstyleTest {
    source = 'src/test/java'
}

// ===================================================================
// Configurações de Compilação
// ===================================================================

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += [
        '-Xlint:all',                                        // Todos os warnings
        '-Xlint:-processing',                                // Exceto processamento de anotações
        '-Werror'                                            // Trata warnings como erros
    ]
}

compileTestJava {
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:all', '-Xlint:-processing']
}

// ===================================================================
// Configurações do JAR
// ===================================================================

jar {
    archiveBaseName = rootProject.name
    archiveVersion = version
    
    manifest {
        attributes(
            'Main-Class': application.mainClass,
            'Implementation-Title': project.name,
            'Implementation-Version': project.version,
            'Implementation-Vendor': 'Template Project',
            'Built-By': System.getProperty('user.name'),
            'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss'),
            'Built-JDK': System.getProperty('java.version')
        )
    }
}

// ===================================================================
// Tarefas Personalizadas
// ===================================================================

// Tarefa para limpeza completa
tasks.register('cleanAll') {
    group = 'build'
    description = 'Limpa todos os arquivos gerados incluindo caches'
    
    doLast {
        delete fileTree('.') {
            include '**/*.log'
            include '**/*.tmp'
        }
        println 'Limpeza completa realizada!'
    }
}

// Tarefa para verificação completa de qualidade
tasks.register('qualityCheck') {
    group = 'verification'
    description = 'Executa todas as verificações de qualidade'
    dependsOn 'check', 'jacocoTestCoverageVerification'
    
    doLast {
        println 'Todas as verificações de qualidade foram executadas com sucesso!'
    }
}

// ===================================================================
// Configurações de Wrapper
// ===================================================================

wrapper {
    gradleVersion = '8.5'                                    // Versão específica do Gradle
    distributionType = Wrapper.DistributionType.BIN         // Distribuição binária (menor)
}

// ===================================================================
// Mensagens de Build
// ===================================================================

gradle.buildFinished { buildResult ->
    if (buildResult.failure) {
        println "❌ Build falhou! Verifique os erros acima."
    } else {
        println "✅ Build executado com sucesso!"
        println "📦 JAR gerado: ${jar.archiveFile.get()}"
        println "🚀 Execute com: ./gradlew run"
    }
}